import rospy
import time

from kinematics        import Kinematics
from dynamixel_library import *
from stupid_walk       import *
from walking_gaits     import *
from math              import pi,cos,sin,atan2,acos,sqrt,pow


def climb_stairs():

    K = Kinematics()
    stand_up()
    parallelGait( 0, 0, 0, 0, 0, 50)
    time.sleep(2)
    parallelGait( 0, 0, 0, 0, 0, 50)
    time.sleep(2)
    parallelGait( 0, 0, 0, 0, 50, 0)
    time.sleep(3)
    rippleMirror( 0, 0, 30, 0)
    time.sleep(2)
    rippleMirror( 0, 100, 0, 0)
    time.sleep(2)
    rippleMirror( 0, 0, -30, 0)
    time.sleep(2)

    rippleMirror(0,0,30,2)
    time.sleep(2)
    rippleMirror(-50,150,0,2)
    time.sleep(2)
    rippleMirror(0,0,-30,2)
    time.sleep(2)

    rippleMirror(0,0,20,1)
    time.sleep(2)
    rippleMirror(50,-30,0,1)
    time.sleep(2)
    rippleMirror(0,0,-20,1)
    time.sleep(2)

    TripodGait(0,10,20,6)
    time.sleep(0.5)
    rippleMirror(50,0,100,1)
    time.sleep(1)
    rippleMirror(50,0,100,1)
    time.sleep(1)

    Write1Pos(1,2048)
    Write1Pos(4,2048)
    time.sleep(0.5)
    rippleMirror(0,0,-65,1)
    rippleMirror(0,0,-65,1)
    time.sleep(1)
    parallelGait(0,0,0, 0, 30, 0)
    time.sleep(3)
    parallelGait(0,0,0, 0, 20, 0)
    time.sleep(3)
    TripodGait(0,10,20,3)
    time.sleep(0.5)
    time.sleep(1)
    parallelGait(0,0,0, 0, 20, 0)
    time.sleep(3)
    singleLeg(0,0,20,5)
    time.sleep(1)
    singleLeg(30,100,0,5)
    time.sleep(1)
    singleLeg(0,0,-20,5)
    time.sleep(1)
    singleLeg(0,0,20,0)
    time.sleep(1)
    singleLeg(-10,120,0,0)
    time.sleep(1)
    singleLeg(0,0,-20,0)
    time.sleep(1)
    # position_staris_4legs = ReadAllPositions()
    # positions_int = [int(i) for i in position_staris_4legs]
    # print("positions :",positions_int )# [1858, 2561, 805, 2229, 1539, 3249, 2167, 1525, 1558, 1917, 2528, 2543, 2298, 1528, 1681, 1825, 2545, 2507]
    # time.sleep(1)
    # # #
    # # # ##############test###############3
    # # # # #parallelGait(0,0,0,0,0,-20)
    # # # # #Write1Pos(13,2948)
    # # # # #Write1Pos(16,1148)
    # # #
    # # # TripodGait(0,20,20,2)
    # # # time.sleep(1)
    # # # parallelGait(0,0,0,0,50,0)
    # # # time.sleep(3)
    # # # # TripodGait(0,30,20)
    # # # # time.sleep(1)
    # # # rippleMirror(50,0,100,2)
    # # # time.sleep(1)
    # # # rippleMirror(20,0,100,2)
    # # # time.sleep(1)
    # # #
    # # # Write1Pos(7,2348)
    # # # Write1Pos(10,1748)
    # # # time.sleep(1)
    # # # rippleMirror(-20,0,-65,2)
    # # # time.sleep(1)
    # # # position_staris_4legs = ReadAllPositions()
    # # # positions_int = [int(i) for i in position_staris_4legs]
    # # # print("positions :",positions_int )
    # # # time.sleep(1)
    # #
    # # ####################################step begins#############################################3
    # # singleLeg(0,0,20,1)
    # # time.sleep(1)
    # # singleLeg(10,40,0,1)
    # # time.sleep(1)
    # # singleLeg(0,0,-20,1)
    # # time.sleep(1)
    # # singleLeg(0,0,20,2)
    # # time.sleep(1)
    # # singleLeg(10,40,0,2)
    # # time.sleep(1)
    # # singleLeg(0,0,-20,2)
    # # time.sleep(1)
    singleLeg(0,0,20,5)
    time.sleep(1)
    singleLeg(-10,50,0,5)
    time.sleep(1)
    singleLeg(0,0,-20,5)
    time.sleep(1)
    singleLeg(0,0,20,0)
    time.sleep(1)
    singleLeg(10,50,0,0)
    time.sleep(1)
    singleLeg(0,0,-20,0)
    time.sleep(1)
    position = ReadAllPositions()#[1919, 2443, 1000, 2173, 1651, 3073, 2119, 1507, 1542, 1978, 2553, 2558, 2494, 1501, 1554, 1588, 2608, 2574]
    print(position)#[1926, 2487, 921, 2161, 1607, 3140, 2259, 1504, 1580, 1823, 2545, 2526, 2718, 1474, 1539, 1420, 2634, 2582]

    time.sleep(3)


    TripodGait(0,20,20,4)
    time.sleep(1)
    parallelGait(0,0,0,0,0,30)
    time.sleep(3)



    parallelGait(0,0,0,0,50,0)

    rippleMirror(50,0,100,2)
    time.sleep(1)
    rippleMirror(20,0,65,2)
    time.sleep(1)

    Write1Pos(7,2259)
    Write1Pos(10,1823)
    time.sleep(1)
    rippleMirror(0,0,-30,2)
    time.sleep(1)
    TripodGait(0,10,10,18)
    rippleMirror(0,0,20,1)
    time.sleep(1)
    Write1Pos(1,1548)
    Write1Pos(4,2548)
    time.sleep(1)
    rippleMirror(0,0,-20,1)
    TripodGait(0,10,10,6)
    parallelGait(0,0,0,0,0,10)
    time.sleep(1)
    parallelGait(0,0,0,0,40,0)
    time.sleep(1)
    singleLeg(50,0,100,5)
    time.sleep(0.5)
    singleLeg(0,0,65,5)
    time.sleep(0.5)
    Write1Pos(13,2718)
    singleLeg(0,0,-35,5)
    time.sleep(0.5)
    singleLeg(-50,0,100,0)
    time.sleep(0.5)
    singleLeg(0,0,65,0)
    time.sleep(0.5)
    Write1Pos(16,1420)
    time.sleep(0.5)
    singleLeg(0,0,-35,0)
    time.sleep(0.5)
    parallelGait(0,0,0,0,0,20)
    parallelGait(5,0,0,0,0,0)




    # #
    # # parallelGait(0,0,0,0,20,0)
    # # time.sleep(1)
    # # parallelGait(0,0,0,0,30,0)
    # # time.sleep(1)
    # # rippleMirror(50,0,100,1)
    # # time.sleep(1)
    # # rippleMirror(50,0,100,1)
    # # time.sleep(1)
    # # Write1Pos(1,2048)
    # # Write1Pos(4,2048)
    # # time.sleep(0.5)
    # # rippleMirror(0,0,-65,1)
    # # rippleMirror(0,0,-65,1)
    # # time.sleep(0.5)
    # # parallelGait(0,0,0,0,0,15)
    # # time.sleep(1)
    # #
    # # rippleMirror(0,0,20,2)
    # # time.sleep(1)
    # # rippleMirror(-50,100,0,2)
    # # time.sleep(1)
    # # rippleMirror(0,0,-20,2)
    # # time.sleep(1)
    # # singleLeg(100,50,165,5)
    # # time.sleep(1)
    # # Write1Pos(13,2948)
    # # time.sleep(1)
    # # singleLeg(0,0,-30,5)
    # # time.sleep(1)
    # # # parallelGait(0,0,0,0,20,0)
    # # # time.sleep(1)
    # # rippleMirror(0,0,20,2)
    # # time.sleep(1)
    # # rippleMirror(0,-110,0,2)
    # # time.sleep(1)
    # # rippleMirror(0,0,-20,2)
    # # time.sleep(1)
    # # singleLeg(-100,50,165,0)
    # # time.sleep(1)
    # # Write1Pos(16,1148)
    # # time.sleep(1)
    # # singleLeg(0,0,-30,0)
    # # time.sleep(1)
    # # rippleMirror(0,0,20,2)
    # # time.sleep(1)
    # # rippleMirror(0,110,0,2)
    # # time.sleep(1)
    # # rippleMirror(0,0,-20,2)
    # # time.sleep(1)
    # # parallelGait(0,0,0,0,0,50)
    # # time.sleep(2)
    # # parallelGait(0,0,0,0,20,0)
    # # time.sleep(2)
    # # parallelGait(0,0,0,0,20,0)
    # # time.sleep(2)
    # # parallelGait(0,0,0,0,20,0)
    # # time.sleep(2)
    # # parallelGait(0,0,0,0,20,0)
    # # time.sleep(2)
    # # parallelGait(0,0,0,0,0,50)
    # # time.sleep(2)
    # # TripodGait(0,20,20,2)
    # # rippleMirror(50,0,100,2)
    # # time.sleep(1)
    # # rippleMirror(20,0,65,2)
    # # time.sleep(1)
    # #
    # # Write1Pos(7,2648)
    # # Write1Pos(10,1448)
    # # time.sleep(1)
    # # rippleMirror(0,0,-35,2)
    # # time.sleep(1)
    # # # TripodGait(0,20,20,7)
    # # # time.sleep(1)
    # # parallelGait(0,0,0,0,20,0)
    # # time.sleep(2)
    # # parallelGait(0,0,0,0,20,0)
    # # time.sleep(2)
    # # parallelGait(0,0,0,0,20,0)
    # # time.sleep(2)
    # # positions_int = [1657, 2652, 657, 2412, 1414, 3406, 2377, 2556, 829, 1717, 1530, 3204, 2180, 1512, 1759, 1963, 2624, 2188]
    # # reb_list = calc_Velocity(positions_int)
    # # ae = K.DoIKine(0,0,10,6)
    # # ae_int = [int(i) for i in ae]
    # # WriteTripodGaitVel(reb_list,1)
    # # WriteTripodGaitAcc(reb_list,1)
    # # WriteTripodGaitVel(reb_list,0)
    # # WriteTripodGaitAcc(reb_list,0)
    # # WriteTripodGait(ae_int,0)
    # # time.sleep(1)
    # # WriteTripodGait(positions_int,0)
    # # time.sleep(1)
    # # WriteTripodGait(ae_int,1)
    # # time.sleep(1)
    # # WriteTripodGait(positions_int,1)
    #oneStep(1)
    #
    # # parallelGait(0,0,0,0,20,0)
    # # time.sleep(2)
    # # parallelGait(0,0,0,0,20,0)
    # # time.sleep(2)
    # # TripodGait(0,20,20,4)
    ##############test
    # My_position_2leg = [1858, 2561, 805, 2229, 1539, 3249, 2167, 1525, 1558, 1917, 2528, 2543, 2298, 1528, 1681, 1825, 2545, 2507]
    # singleLeg(0,0,20,5)
    # time.sleep(0.5)
    # WriteParallel(My_position_2leg,5)
    # time.sleep(1)
    # singleLeg(0,0,20,0)
    # time.sleep(0.5)
    # WriteParallel(My_position_2leg,0)
if __name__=='__main__':
    try:
        CheckStatus()
        DisableTorqueAllServos()
        pwm_list =[700]*18        # Checks if all 18 servos are connected
        WritePWMLimit(pwm_list) # Modify PWM Limit (torque must be off)
        K = Kinematics()        # Creates Kinematics class object "K"
        EnableTorqueAllServos() # Enable Torque, duuh
        #W = WalkingGaits()

        climb_stairs()  # tripod gait that expects keyboard press between steps
    except rospy.ROSInterruptException :
        portHandler.closePort()
